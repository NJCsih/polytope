(defcfg
  process-unmapped-keys yes
danger-enable-cmd yes

  linux-dev ("/dev/input/by-path/platform-i8042-serio-0-event-kbd")
  linux-continue-if-no-devs-found yes
)

(defvar
    ;; When pressing the sway leader key, how long should it wait to try to activate?
    sway-timeout 100

    roll-grace 80 
    nop-reserved nop8
    nop-stop nop9 
)


(defsrc
	caps a  s  d  f  g  h  j  k  l  ;  '  ret
	lsft z  x  c  v  b  n  m  ,  .  /  rsft
)

;; blank layout
#|
(
	_    _  _  _  _  _  _  _  _  _  _  _  _
	_    _  _  _  _  _  _  _  _  _  _  _
)
|#

(defalias
    ;; sway mode super -=- entry point for all things sway
    fsway (
        fork 
            (multi 
                ;; on press
                (on-press tap-virtualkey swayseq-key) ;; initate sequence

                ;; on release (remove all sway things)
                (on-release tap-virtualkey stopseq) 

                ;; release layers
                (on-release release-virtualkey fsway)
                (on-release release-virtualkey dsway) ;; this should technically already be handled, but don't want to be stuck

                (on-release tap-virtualkey check-roll) ;; see if we are within roll timings
            )
        ;; true key
        f
        ;; due to mods behaving weird with a delay (i.e. very hard to do Fl), don't do anything
        ;; sway if any modifier is pressed
        (lalt ralt lsft rsft lctrl rctl lmeta rmeta)
    )
)

(defvirtualkeys
  stopseq $nop-stop
)

(defalias
    d-for-sway (multi
        d
        (on-release release-virtualkey dsway) ;; release layer
    )
)

(deflayer qwerty
	esc  a  s @d-for-sway  @fsway  g  h  j  k l  ;  '  ret
	lsft z  x  c  v  b  n  m  ,  .  /  rsft
)

(defseq
  fd-switch (nop1 f d)
)

;; Ah, this is the fun part
(defvirtualkeys
    ;; This starts the sway-sequence defined above
    ;; start seq + wait $sway-timeout + fill in nop1 and f
    swayseq-key (macro (sequence $sway-timeout hidden-delay-type) nop1 f)

    ;; Because swya entry keys need to be virtualkeys because of sequences, the layers here
    ;; also need to be virtual keys.
    ;; An added benefit: easy way to see if stuff is on/off and easy to disable them
    fsway (layer-while-held sway) 
    dsway (layer-while-held sway-d)

    ;; these are nop keys that let us keep track of if these keys are in an activate-able state.
    ;; This is solely used for roll check.
    sd $nop-reserved

    ;; Simple roll check. f + key starts. After $roll-grace, it checks if something else was pushed.
    check-roll (switch 
        ((input virtual sd)) (multi (macro f d) (on-press release-virtualkey sd)) break
        () XX break
    )

    ;; These are that will put you into sway mode (they need to be virtualkeys)
    ;; These will be triggered directly from the sequence, so they are the entry point
    ;; and may not trigger immediately because of roll check

    ;; d have simple checks
    ;; - they activate sway layer
    ;; - mark that they are currently pressed
    ;; - after $roll-grace mark not-pressed (roll grace has left)
    ;; when f is released, it will check if they are marked as pressed, if so it's been fast
    ;; enough that they can just be simulated.
    ;; this approach works because the layer can be activated instantly without (much) issue
    fd-switch (
        multi 
            ;; layers (1 then 2)
            (on-press press-virtualkey fsway) 
            (macro 15 (on-press press-virtualkey dsway))

            (on-press press-virtualkey sd)
            (macro $roll-grace (on-press release-virtualkey sd))
    )

)

;; This is main sway layer. Manual work needs to be done to add keys to activation phase
(deflayer sway
	_    XX  XX (multi (on-press press-virtualkey dsway) (on-release release-virtualkey dsway)) XX  XX XX XX XX XX XX  XX  XX
	_    XX  XX  XX  XX  XX  1  2  3  4 5  XX
)


(deflayer sway-d
	_    _  _  _  _  _  _ _ _ _ _ _  _
	_    _  _  _  _  _  _  _  _  _  _  _
)
